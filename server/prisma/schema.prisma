// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  username    String    @unique
  password    String
  displayName String
  avatar      String
  chatA       PrivateChat[]      @relation("joinChatAsParticipantA")
  chatB       PrivateChat[]      @relation("joinChatAsParticipantB")
  publicChatId    String[]  @db.ObjectId
  publicChats PublicChat[] @relation(fields: [publicChatId], references: [id])
  
  myMessages  Message[]   @relation("sendMessage")
}



model PrivateChat {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  messages        Message[] @relation("containMessagesPrivate")
  lastUpdated     DateTime  @default(now())
  participantA    User      @relation("joinChatAsParticipantA", fields: [participantAId], references: [id], onDelete: Cascade)
  participantAId  String    @db.ObjectId
  participantB    User      @relation("joinChatAsParticipantB", fields: [participantBId], references: [id], onDelete: Cascade)
  participantBId  String    @db.ObjectId
  participantAUnread    Int     @default(0)
  participantBUnread    Int     @default(0)

  
}

model PublicChat {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  chatName        String    @default("Tmp Name")
  chatAvatar      String    @default("https://firebasestorage.googleapis.com/v0/b/networkchatapplication.appspot.com/o/avatar%2Favatar2.png?alt=media&token=6c4120d7-47b7-4030-909f-a4da1904561b")
  messages        Message[] @relation("containMessagesPublic")
  lastUpdated     DateTime  @default(now())
  participants    User[]      @relation( fields: [participantsId], references: [id]) //onCascade not support
  participantsId  String[]    @db.ObjectId
  participantsUnread    Int[]     @default([])
  
}

model Message {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  chatPrivate            PrivateChat?          @relation("containMessagesPrivate",fields: [chatPrivateId], references: [id], onDelete: Cascade)
  chatPrivateId          String?        @db.ObjectId
  chatPublic            PublicChat?          @relation("containMessagesPublic",fields: [chatPublicId], references: [id], onDelete: Cascade)
  chatPublicId          String?        @db.ObjectId

  sender          User          @relation("sendMessage", fields: [senderId], references: [id], onDelete: Cascade)
  senderId        String        @db.ObjectId
  type            MessageType
  text            String?
  pictures        String[]
  latitude        Float?
  longitude       Float?    
  sentAt          DateTime      @default(now())
}

enum MessageType {
  Text
  Images
  Location
}